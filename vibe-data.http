### Health Check
GET {{baseUrl}}/actuator/health
Authorization: Basic {{username}} {{password}}

###

### Create new task
# @name newTask
POST {{baseUrl}}/new
Authorization: Basic {{username}} {{password}}
Content-Type: application/json

{
  "url": "jdbc:trino://trino.czxqx2r9.data.bizmrg.com:443?user=hackuser&password=dovq(ozaq8ngt)oS",
  "ddl": [
    {
      "statement": "CREATE TABLE flights.public.flights ( flightdate date, airline varchar, origin varchar, dest varchar, cancelled boolean, diverted boolean, crsdeptime integer, deptime double, depdelayminutes double, depdelay double, arrtime double, arrdelayminutes double, airtime double, crselapsedtime double, actualelapsedtime double, distance double, year integer, quarter integer, month integer, dayofmonth integer, dayofweek integer, marketing_airline_network varchar, operated_or_branded_code_share_partners varchar, dot_id_marketing_airline integer, iata_code_marketing_airline varchar, flight_number_marketing_airline integer, operating_airline varchar, dot_id_operating_airline integer, iata_code_operating_airline varchar, tail_number varchar, flight_number_operating_airline integer, originairportid integer, originairportseqid integer, origincitymarketid integer, origincityname varchar, originstate varchar, originstatefips integer, originstatename varchar, originwac integer, destairportid integer, destairportseqid integer, destcitymarketid integer, destcityname varchar, deststate varchar, deststatefips integer, deststatename varchar, destwac integer, depdel15 double, departuredelaygroups double, deptimeblk varchar, taxiout double, wheelsoff double, wheelson double, taxiin double, crsarrtime integer, arrdelay double, arrdel15 double, arrivaldelaygroups double, arrtimeblk varchar, distancegroup integer, divairportlandings double ) WITH ( format = 'PARQUET', format_version = 2 );"
    }
  ],
  "queries": [
    {
      "queryid": "10ba3c04-0f91-4ef3-a717-c1e0d33b31bc",
      "query": "WITH MonthlyFlightCounts AS ( SELECT Origin, month(FlightDate) AS Month, COUNT(*) AS TotalFlights FROM flights.public.flights GROUP BY Origin, month(FlightDate) ORDER BY Month DESC, TotalFlights DESC ), TopAirportsByMonth AS ( SELECT Month, Origin, TotalFlights, RANK() OVER (PARTITION BY Month ORDER BY TotalFlights DESC) AS AirportRank FROM MonthlyFlightCounts ), FilteredFlights AS ( SELECT f.*, CASE WHEN f.DepTimeBlk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') THEN 'Peak' ELSE 'Off-Peak' END AS TimeOfDay FROM flights.public.flights f JOIN TopAirportsByMonth t ON f.Origin = t.Origin AND month(f.FlightDate) = t.Month WHERE f.Cancelled = false AND f.Diverted = false AND t.AirportRank <= 10 ) SELECT ff.Month, Origin, TimeOfDay, COUNT(*) AS TotalFlights, ROUND(AVG(TaxiOut), 2) AS AvgTaxiOut, ROUND(AVG(DepDelay), 2) AS AvgDEPDelay, ROUND(AVG(ArrDelay), 2) AS AvgARRDelay, ROUND(CORR(TaxiOut, DepDelay), 2) AS TaxiOut_DepDelay_Correlation, ROUND(CORR(TaxiOut, ArrDelay), 2) AS TaxiOut_ArrDelay_Correlation, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND( (SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2 ) AS PercentDelayed FROM FilteredFlights ff GROUP BY ff.Month, Origin, TimeOfDay ORDER BY ff.Month DESC, Origin, TimeOfDay;",
      "runquantity": 795,
      "executiontime": 20
    },
    {
      "queryid": "8abd47c0-31cb-4ba0-891f-9bac53bbc909",
      "query": "WITH AirportDiscrepancy AS ( SELECT Origin AS Airport, OriginCityName AS AirportCity, OriginState AS AirportState, 'Origin' AS AirportRole, COUNT(*) AS TotalFlights, AVG(ActualElapsedTime - CRSElapsedTime) AS AvgDiscrepancy, AVG(DepDelay) AS AvgDepDelay, AVG(DepDelayMinutes) AS AvgDepDelayMinutes, AVG(TaxiOut) AS AvgTaxiOut, AVG(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures, AVG(CASE WHEN Diverted THEN 1 ELSE 0 END) AS PercentDiverted, AVG(CASE WHEN Cancelled THEN 1 ELSE 0 END) AS PercentCancelled FROM flights.public.flights WHERE CRSElapsedTime IS NOT NULL AND ActualElapsedTime IS NOT NULL AND CRSElapsedTime > 0 AND Cancelled = false GROUP BY Origin, OriginCityName, OriginState UNION ALL SELECT Dest AS Airport, DestCityName AS AirportCity, DestState AS AirportState, 'Destination' AS AirportRole, COUNT(*) AS TotalFlights, AVG(ActualElapsedTime - CRSElapsedTime) AS AvgDiscrepancy, AVG(ArrDelay) AS AvgDepDelay, AVG(ArrDelayMinutes) AS AvgDepDelayMinutes, AVG(TaxiIn) AS AvgTaxiOut, AVG(CASE WHEN ArrDel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures, AVG(CASE WHEN Diverted THEN 1 ELSE 0 END) AS PercentDiverted, AVG(CASE WHEN Cancelled THEN 1 ELSE 0 END) AS PercentCancelled FROM flights.public.flights WHERE CRSElapsedTime IS NOT NULL AND ActualElapsedTime IS NOT NULL AND CRSElapsedTime > 0 AND Cancelled = false GROUP BY Dest, DestCityName, DestState ), RankedAirports AS ( SELECT *, RANK() OVER (ORDER BY AvgDiscrepancy DESC) AS DiscrepancyRank FROM AirportDiscrepancy WHERE TotalFlights > 1000 ) SELECT Airport, AirportCity, AirportState, AirportRole, TotalFlights, ROUND(AvgDiscrepancy, 2) AS AvgDiscrepancyMinutes, ROUND(AvgDepDelay, 2) AS AvgDelayMinutes, ROUND(AvgDepDelayMinutes, 2) AS AvgDelayMinutesNonNegative, ROUND(AvgTaxiOut, 2) AS AvgTaxiTimeMinutes, ROUND(PercentDelayedDepartures * 100, 2) AS PercentDelayedFlights, ROUND(PercentDiverted * 100, 2) AS PercentDivertedFlights, ROUND(PercentCancelled * 100, 2) AS PercentCancelledFlights, DiscrepancyRank FROM RankedAirports WHERE DiscrepancyRank <= 20 ORDER BY DiscrepancyRank;",
      "runquantity": 490,
      "executiontime": 25
    }
  ]
}

> {%
    client.test("Accepted 202", function () {
        client.assert(response.status === 202, "Expected 202");
    });
    const body = typeof response.body === 'string' ? JSON.parse(response.body) : response.body;
    if (body && (body.taskid || body.taskId)) {
        const id = body.taskid ?? body.taskId;
        client.global.set("task_id", id);
        client.log("Stored task_id=" + id);
    } else {
        client.log("task_id not found in response: " + JSON.stringify(body));
    }
%}

###

### Get status
GET {{baseUrl}}/status?task_id={{task_id}}
Authorization: Basic {{username}} {{password}}

###

### Get result
GET {{baseUrl}}/getresult?task_id={{task_id}}
Authorization: Basic {{username}} {{password}}

###