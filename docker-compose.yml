services:

  vibe-data:
    build: .
    command: ["java", "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005", "-Dconfig.file=/app/config/application-prod.properties", "-jar", "vibe-data.jar"]
    volumes:
      - './src/main/resources/application-prod.properties:/app/config/application-prod.properties'
      - ./sources:/app/sources
    restart: always
    container_name: vibe-data
    networks: [ lake-net ]
    ports:
      - "8086:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - PG_DATASOURCE_URL=jdbc:postgresql://vibe-data-db:5432/vibedata
      - PG_NAME=pgadmin
      - PG_PASS=pgadmin
      - TRINO_QUERY_TIMEOUT=20
      - VALIDATION_MAX_ATTEMPTS=3
      - TRINO_JDBC_URL=jdbc:trino://vibe-data-trino-1:8080/iceberg
      - VALIDATION_ENABLED=true
      - LLM_TIMEOUT_SECONDS=60
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:192.168.88.151"
    tty: true
    depends_on:
      - vibe-data-db

  vibe-data-db:
    build:
      dockerfile: ./Dockerfile
      context: postgres
    restart: always
    container_name: vibe-data-db
    networks: [ lake-net ]
    ports:
      - "25436:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_USER=pgadmin
      - POSTGRES_PASSWORD=pgadmin
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    networks: [ lake-net ]
    environment:
      PGADMIN_DEFAULT_EMAIL: "kuramshin.py@yandex.ru"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5054:80"
    depends_on:
      - vibe-data-db

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
      MINIO_REGION: us-east-1
      # говорим MinIO, что *.minio — его домены
      MINIO_DOMAIN: minio
      MINIO_SERVER_URL: http://minio:9000
    networks: [ lake-net ]
    ports:
      - "9000:9000"
      - "9001:9001"
    command: [ "server", "/data", "--console-address", ":9001" ]
    volumes:
      - ./data/minio:/data

  iceberg-rest:
    image: tabulario/iceberg-rest:latest
    networks: [ lake-net ]
    environment:
      # --- конфиг каталога для самого REST-сервиса ---
      CATALOG_WAREHOUSE: s3://warehouse/

      # >>> принудительно S3FileIO + настройки MinIO <<<
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9000
      CATALOG_S3_PATH__STYLE__ACCESS: "true"
      CATALOG_S3_REGION: us-east-1
      CATALOG_S3_SIGNING__REGION: us-east-1
      CATALOG_S3_ACCESS__KEY__ID: admin
      CATALOG_S3_SECRET__ACCESS__KEY: password
      CATALOG_S3_SSL__ENABLED: "false"

      # --- креды для AWS SDK (подхватит S3FileIO как default provider chain) ---
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password

  trino:
    image: trinodb/trino:latest
    depends_on: [ iceberg-rest ]   # можно и убрать, REST нам больше не нужен
    networks: [ lake-net ]
    ports: [ "18080:8080" ]
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - JAVA_TOOL_OPTIONS=-Ds3.path-style-access=true -Daws.region=us-east-1
    volumes:
      - ./trino-config:/etc/trino:rw

  redis:
    image: redis:7.2-alpine
    container_name: redis
    command: [
      "redis-server",
      "--requirepass", "redisadmin",
      "--appendonly", "yes",
      "--maxmemory-policy", "allkeys-lru"
    ]
    ports:
      - "26379:6379"
    environment:
      REDIS_PASSWORD: redisadmin
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a redisadmin ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 20

volumes:
  redis_data:
  postgres_data:
  pgadmin_data:
    driver: local

networks:
  lake-net:
    name: lake-net