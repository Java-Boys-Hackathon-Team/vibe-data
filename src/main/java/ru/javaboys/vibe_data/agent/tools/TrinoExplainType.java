package ru.javaboys.vibe_data.agent.tools;

import lombok.Getter;

@Getter
public enum TrinoExplainType {
    /**
     * Показывает логический план (какие операторы применяются в каком порядке).
     * Это «чистая алгебра запросов», без разбивки на стадии кластера.
     */
    LOGICAL("LOGICAL"),
    /**
     * План с разбивкой на стадии и операторов внутри каждой стадии. Видно,
     * где локальные/удалённые обмены (LocalExchange, RemoteExchange),
     * распределение работы по узлам. Полезен для оценки накладных
     * расходов сети и параллелизма.
     */
    DISTRIBUTED("DISTRIBUTED"),
    /**
     * Проверяет корректность запроса и выводит план с фокусом
     * на ошибки/несоответствия. Чаще используют для отладки.
     */
    VALIDATE("VALIDATE"),
    /**
     * Не полный план, а «I/O summary»: какие таблицы будут читаться,
     * сколько примерно строк/байт, какие фильтры/колонки реально нужны.
     * Очень удобно для понимания нагрузки на источники.
     */
    IO("IO"),
    /**
     * Отдельная форма: выполняет запрос и возвращает фактические runtime-метрики
     * (CPU, wall time, строки, байты). Это уже не просто план, а «счётчик» реального выполнения.
     * Есть и EXPLAIN ANALYZE VERBOSE — даёт детализацию по операторам.
     */
    ANALYZE("ANALYZE"),
    /**
     * То же самое что и ANALYZE, но более детально:
     * выводятся все операторы, включая вспомогательные (например, фильтры, проекции, обмены),
     * показываются локальные детали внутри стадий,
     * иногда добавляются дополнительные runtime-метрики (например, блокировки, распределение времени CPU vs wall).
     */
    ANALYZE_VERBOSE("ANALYZE VERBOSE");

    private final String name;

    TrinoExplainType(String name) {
        this.name = name;
    }
}
